<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NATS.Client</name>
    </assembly>
    <members>
        <member name="T:NATS.Client.ISyncSubscription">
            <summary>
            <see cref="T:NATS.Client.ISyncSubscription"/> provides messages for a subject through calls
            to <see cref="M:NATS.Client.ISyncSubscription.NextMessage"/> and <see cref="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:NATS.Client.ISubscription">
            <summary>
            Represents interest in a NATS topic.
            </summary>
            <remarks>
            <para>Subscriptions represent interest in a topic on a NATS Server or cluster of
            NATS Servers. Subscriptions can be exact or include wildcards. A subscriber can
            process a NATS message synchronously (<see cref="T:NATS.Client.ISyncSubscription"/>) or asynchronously
            (<see cref="T:NATS.Client.IAsyncSubscription"/>).</para>
            </remarks>
            <seealso cref="T:NATS.Client.ISyncSubscription"/>
            <seealso cref="T:NATS.Client.IAsyncSubscription"/>
        </member>
        <member name="M:NATS.Client.ISubscription.Unsubscribe">
            <summary>
            Removes interest in the <see cref="P:NATS.Client.ISubscription.Subject"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.ISubscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="P:NATS.Client.ISubscription.Connection"/>'s Request methods use this functionality.</remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.ISubscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the limits for pending messages and bytes for this instance.
            </summary>
            <remarks>Zero (<c>0</c>) is not allowed. Negative values indicate that the
            given metric is not limited.</remarks>
            <param name="messageLimit">The maximum number of pending messages.</param>
            <param name="bytesLimit">The maximum number of pending bytes of payload.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the pending byte and message counts.
            </summary>
            <param name="pendingBytes">When this method returns, <paramref name="pendingBytes"/> will
            contain the count of bytes not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
            <param name="pendingMessages">When this method returns, <paramref name="pendingMessages"/> will
            contain the count of messages not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the maximum number of pending bytes and messages during the life of the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <param name="maxPendingBytes">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending bytes.</param>
            <param name="maxPendingMessages">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending messages.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.ClearMaxPending">
            <summary>
            Clears the maximum pending bytes and messages statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Subject">
            <summary>
            Gets the subject for this subscription.
            </summary>
            <remarks><para>Subject names, including reply subject (INBOX) names, are case-sensitive
            and must be non-empty alphanumeric strings with no embedded whitespace, and optionally
            token-delimited using the dot character (<c>.</c>), e.g.: <c>FOO</c>, <c>BAR</c>,
            <c>foo.BAR</c>, <c>FOO.BAR</c>, and <c>FOO.BAR.BAZ</c> are all valid subject names, while:
            <c>FOO. BAR</c>, <c>foo. .bar</c> and <c>foo..bar</c> are <em>not</em> valid subject names.</para>
            <para>NATS supports the use of wildcards in subject subscriptions.</para>
            <list>
            <item>The asterisk character (<c>*</c>) matches any token at any level of the subject.</item>
            <item>The greater than symbol (<c>&gt;</c>), also known as the <em>full wildcard</em>, matches
            one or more tokens at the tail of a subject, and must be the last token. The wildcard subject
            <c>foo.&gt;</c> will match <c>foo.bar</c> or <c>foo.bar.baz.1</c>, but not <c>foo</c>.</item>
            <item>Wildcards must be separate tokens (<c>foo.*.bar</c> or <c>foo.&gt;</c> are syntactically
            valid; <c>foo*.bar</c>, <c>f*o.b*r</c> and <c>foo&gt;</c> are not).</item>
            </list>
            <para>For example, the wildcard subscrpitions <c>foo.*.quux</c> and <c>foo.&gt;</c> both match
            <c>foo.bar.quux</c>, but only the latter matches <c>foo.bar.baz</c>. With the full wildcard,
            it is also possible to express interest in every subject that may exist in NATS (<c>&gt;</c>).</para>
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Queue">
            <summary>
            Gets the optional queue group name.
            </summary>
            <remarks>
            <para>If present, all subscriptions with the same name will form a distributed queue, and each message will only
            be processed by one member of the group. Although queue groups have multiple subscribers,
            each message is consumed by only one.</para>
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Connection">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.IsValid">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NATS.Client.ISubscription"/> is still valid.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.QueuedMessageCount">
            <summary>
            Gets the number of messages remaining in the delivery queue.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum allowed count of pending bytes.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending bytes.</value>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum allowed count of pending messages.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending messages.</value>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingBytes">
            <summary>
            Gets the number of bytes not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessages">
            <summary>
            Gets the number of messages not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of messages seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Delivered">
            <summary>
            Gets the number of delivered messages for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Dropped">
            <summary>
            Gets the number of known dropped messages for this instance.
            </summary>
            <remarks>
            This will correspond to the messages dropped by violations of
            <see cref="P:NATS.Client.ISubscription.PendingByteLimit"/> and/or <see cref="P:NATS.Client.ISubscription.PendingMessageLimit"/>.
            If the NATS server declares the connection a slow consumer, the count
            may not be accurate.
            </remarks>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, blocking until one is available.
            </summary>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, or block up to a given timeout until the next one is available.
            </summary>
            <param name="timeout">The amount of time, in milliseconds, to wait for
            the next message.</param>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
        </member>
        <member name="T:NATS.Client.Defaults">
            <summary>
            This class contains default values for fields used throughout NATS.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Version">
            <summary>
            Client version
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Url">
            <summary>
            The default NATS connect url ("nats://localhost:4222")
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Port">
            <summary>
            The default NATS connect port. (4222)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxReconnect">
            <summary>
            Default number of times to attempt a reconnect. (60)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectWait">
            <summary>
            Default ReconnectWait time (2 seconds)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Timeout">
            <summary>
            Default timeout  (2 seconds).
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.PingInterval">
            <summary>
             Default ping interval (2 minutes);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxPingOut">
            <summary>
            Default MaxPingOut value (2);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxChanLen">
            <summary>
            Default MaxChanLen (65536)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.RequestChanLen">
            <summary>
            Default Request Channel Length
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.LangString">
            <summary>
            Language string of this client, ".NET"
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingMsgsLimit">
            <summary>
            Default subscriber pending messages limit.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingBytesLimit">
            <summary>
            Default subscriber pending bytes limit.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnEventArgs">
            <summary>
            Provides the details when the state of a <see cref="T:NATS.Client.Connection"/>
            changes.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.ErrEventArgs">
            <summary>
            Provides details for an error encountered asynchronously
            by an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Subscription">
            <summary>
            Gets the <see cref="T:NATS.Client.Subscription"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Error">
            <summary>
            Gets the error message associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.IC">
            Internal Constants
        </member>
        <member name="T:NATS.Client.MsgHandlerEventArgs">
            <summary>
            Provides the message received by an <see cref="T:NATS.Client.IAsyncSubscription"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHandlerEventArgs.Message">
            <summary>
            Retrieves the message.
            </summary>
        </member>
        <member name="T:NATS.Client.AsyncSubscription">
            <summary>
            <see cref="T:NATS.Client.AsyncSubscription"/> asynchronously delivers messages to listeners of the <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            event. This class should not be used directly.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.AsyncSubscription"/> is created without listening to the <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            event, no messages will be received until <see cref="M:NATS.Client.AsyncSubscription.Start"/> has been called.
            </remarks>
        </member>
        <member name="T:NATS.Client.Subscription">
            <summary>
            Represents interest in a NATS topic. This class should
            not be used directly.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.processMsg(NATS.Client.Msg)">
            <summary>
            Called by <see cref="T:NATS.Client.Connection"/> when a <see cref="T:NATS.Client.Msg"/> is received, returning
            a value indicating if the <see cref="T:NATS.Client.Connection"/> should keep the subscription
            after processing.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> received by the <see cref="T:NATS.Client.Subscription"/>.</param>
            <returns><c>true</c> if-and-only-if the <see cref="T:NATS.Client.Subscription"/> should remain active;
            otherwise <c>false</c> if the <see cref="T:NATS.Client.Connection"/> should remove this
            instance.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.tallyDeliveredMessage(NATS.Client.Msg)">
            <summary>
            Implementors should call this method when <paramref name="msg"/> has been
            delivered to an <see cref="T:NATS.Client.ISubscription"/>.
            </summary>
            <remarks>Caller must lock on <see cref="F:NATS.Client.Subscription.mu"/>.</remarks>
            <param name="msg">The <see cref="T:NATS.Client.Msg"/> object delivered to a
            <see cref="T:NATS.Client.ISubscription"/>.</param>
            <returns>The total number of delivered messages.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.Unsubscribe">
            <summary>
            Removes interest in the <see cref="P:NATS.Client.Subscription.Subject"/>.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.Subscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.Subscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="P:NATS.Client.Subscription.Connection"/>'s Request methods use this functionality.</remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.Subscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.Subscription.Dispose(System.Boolean)">
            <summary>
            Unsubscribes the subscription and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:NATS.Client.Subscription.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <remarks>This method unsubscribes from the subject, to release resources.</remarks>
        </member>
        <member name="M:NATS.Client.Subscription.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>A string that represents the current <see cref="T:NATS.Client.Subscription"/>.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the limits for pending messages and bytes for this instance.
            </summary>
            <remarks>Zero (<c>0</c>) is not allowed. Negative values indicate that the
            given metric is not limited.</remarks>
            <param name="messageLimit">The maximum number of pending messages.</param>
            <param name="bytesLimit">The maximum number of pending bytes of payload.</param>
        </member>
        <member name="M:NATS.Client.Subscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the pending byte and message counts.
            </summary>
            <param name="pendingBytes">When this method returns, <paramref name="pendingBytes"/> will
            contain the count of bytes not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
            <param name="pendingMessages">When this method returns, <paramref name="pendingMessages"/> will
            contain the count of messages not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
        </member>
        <member name="M:NATS.Client.Subscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the maximum number of pending bytes and messages during the life of the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <param name="maxPendingBytes">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending bytes.</param>
            <param name="maxPendingMessages">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending messages.</param>
        </member>
        <member name="M:NATS.Client.Subscription.ClearMaxPending">
            <summary>
            Clears the maximum pending bytes and messages statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Subject">
            <summary>
            Gets the subject for this subscription.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Queue">
            <summary>
            Gets the optional queue group name.
            </summary>
            <remarks>
            If present, all subscriptions with the same name will form a distributed queue, and each message will only
            be processed by one member of the group.
            </remarks>
        </member>
        <member name="P:NATS.Client.Subscription.Connection">
            <summary>
            Gets the <see cref="P:NATS.Client.Subscription.Connection"/> associated with this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.IsValid">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NATS.Client.Subscription"/> is still valid.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.QueuedMessageCount">
            <summary>
            Gets the number of messages remaining in the delivery queue.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="P:NATS.Client.Subscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum allowed count of pending bytes.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending bytes.</value>
        </member>
        <member name="P:NATS.Client.Subscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum allowed count of pending messages.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending messages.</value>
        </member>
        <member name="P:NATS.Client.Subscription.PendingBytes">
            <summary>
            Gets the number of bytes not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.PendingMessages">
            <summary>
            Gets the number of messages not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of messages seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Delivered">
            <summary>
            Gets the number of delivered messages for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Dropped">
            <summary>
            Gets the number of known dropped messages for this instance.
            </summary>
            <remarks>
            This will correspond to the messages dropped by violations of
            <see cref="P:NATS.Client.Subscription.PendingByteLimit"/> and/or <see cref="P:NATS.Client.Subscription.PendingMessageLimit"/>.
            If the NATS server declares the connection a slow consumer, the count
            may not be accurate.
            </remarks>
        </member>
        <member name="T:NATS.Client.IAsyncSubscription">
            <summary>
            <see cref="T:NATS.Client.IAsyncSubscription"/> asynchronously delivers messages to listeners of the <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            event.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> is created without listening to the <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            event, no messages will be received until <see cref="M:NATS.Client.IAsyncSubscription.Start"/> has been called.
            </remarks>
        </member>
        <member name="M:NATS.Client.IAsyncSubscription.Start">
            <summary>
            Starts delivering received messages to listeners on <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            from a separate thread.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> has already started delivering messages, this
            method is a no-op.
            </remarks>
        </member>
        <member name="E:NATS.Client.IAsyncSubscription.MessageHandler">
            <summary>
            Occurs when the <see cref="T:NATS.Client.IAsyncSubscription"/> receives a message from the
            underlying <see cref="T:NATS.Client.ISubscription"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.Start">
            <summary>
            Starts delivering received messages to listeners on <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            from a separate thread.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> has already started delivering messages, this
            method is a no-op.
            </remarks>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.Unsubscribe">
            <summary>
            Removes interest in the given subject.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.AsyncSubscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks><para>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="T:NATS.Client.Connection"/>'s Request methods use this functionality.</para>
            <para>Calling this method will invoke <see cref="M:NATS.Client.AsyncSubscription.Start"/> if it has not already been called.</para></remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.AsyncSubscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="E:NATS.Client.AsyncSubscription.MessageHandler">
            <summary>
            Occurs when the <see cref="T:NATS.Client.AsyncSubscription"/> receives a message from the
            underlying <see cref="T:NATS.Client.Subscription"/>.
            </summary>
        </member>
        <member name="T:NATS.Client.Options">
            <summary>
            This class is used to setup all NATs client options.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ClosedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection is closed.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ServerDiscoveredEventHandler">
            <summary>
            Represents the method that will handle an event raised
            whenever a new server has joined the cluster.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.DisconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has been disconnected from a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has reconnected to a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.AsyncErrorEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when an error occurs out of band.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectForever">
            <summary>
            Set <see cref="P:NATS.Client.Options.MaxReconnect"/> to this value for the client to attempt to
            connect indefinitely. 
            </summary>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.String)">
            <summary>
            Adds an X.509 certifcate from a file for use with a secure connection.
            </summary>
            <param name="fileName">Path to the certificate file to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate
            ocurred. For example:
            <list>
            <item>The certificate file does not exist.</item>
            <item>The certificate is invalid.</item>
            <item>The certificate's password is incorrect.</item></list></exception>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds an X.509 certifcate for use with a secure connection.
            </summary>
            <param name="certificate">An X.509 certificate represented as an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate
            ocurred. For example:
            <list>
            <item>The certificate file does not exist.</item>
            <item>The certificate is invalid.</item>
            <item>The certificate's password is incorrect.</item></list></exception>
        </member>
        <member name="F:NATS.Client.Options.TLSRemoteCertificationValidationCallback">
            <summary>
            Overrides the default NATS RemoteCertificationValidationCallback.
            </summary>
            <remarks>
            The default callback simply checks if there were any protocol
            errors. Overriding this callback is useful during testing, or accepting self
            signed certificates.
            </remarks>
        </member>
        <member name="M:NATS.Client.Options.ToString">
            <summary>
            Returns a string representation of the
            value of this Options instance.
            </summary>
            <returns>String value of this instance.</returns>
        </member>
        <member name="P:NATS.Client.Options.Url">
            <summary>
            Gets or sets the url used to connect to the NATs server.
            </summary>
            <remarks>
            This may contain username/password information.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Servers">
            <summary>
            Gets or sets the array of servers that the NATs client will connect to.
            </summary>
            <remarks>
            The individual URLs may contain username/password information.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.NoRandomize">
            <summary>
            Gets or sets a value indicating whether or not the server chosen for connection
            should not be selected randomly.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Name">
            <summary>
            Gets or sets the name of this client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Verbose">
            <summary>
            Gets or sets a value indicating whether or not logging information should be verbose.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Pedantic">
            <summary>
            This option is not used by the NATS Client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.UseOldRequestStyle">
            <summary>
            Gets or sets a value indicating whether or not the old
            request pattern should be used.
            </summary>
            <remarks>
            The old request pattern involved a separate subscription
            per request inbox. The new style (default) involves creating
            a single inbox subscription per connection, upon the first
            request, and mapping outbound requests over that one
            subscription.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Secure">
            <summary>
            Get or sets a value indicating whether or not a secure connection (TLS)
            should be made to NATS servers.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.AllowReconnect">
            <summary>
            Gets or sets a value indicating whether or not an <see cref="T:NATS.Client.IConnection"/> will attempt
            to reconnect to the NATS server if a connection has been lost.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxReconnect">
            <summary>
            Gets or sets the maxmimum number of times a connection will
            attempt to reconnect.  To reconnect indefinitely set this value to
            <see cref="F:NATS.Client.Options.ReconnectForever"/>
            </summary>
        </member>
        <member name="P:NATS.Client.Options.ReconnectWait">
            <summary>
            Gets or sets the amount of time, in milliseconds, the client will 
            wait before attempting a reconnection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.PingInterval">
            <summary>
            Gets or sets the interval, in milliseconds, pings will be sent to the server.
            </summary>
            <remarks>
            Take care to coordinate this value with the server's interval.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Timeout">
            <summary>
            Gets or sets the timeout, in milliseconds, when connecting to a NATS server.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxPingsOut">
            <summary>
            Gets or sets the maximum number of outstanding pings before
            terminating a connection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.SubChannelLength">
            <summary>
            Gets or sets the size of the subscriber channel, or number
            of messages the subscriber will buffer internally.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.User">
            <summary>
            Gets or sets the user name used when connecting to the NATs server,
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Password">
            <summary>
            Sets the user password used when connecting to the NATs server,
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Token">
            <summary>
            Gets or sets the token used when connecting to the NATs server
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.SubscriberDeliveryTaskCount">
            <summary>
            Gets or sets the number of long running tasks to deliver messages
            to asynchronous subscribers. The default is zero (<c>0</c>) indicating each
            asynchronous subscriber has its own channel and task created to 
            deliver messages.
            </summary>
            <remarks>
            The default where each subscriber has a delivery task is very 
            performant, but does not scale well when large numbers of
            subscribers are required in an application.  Setting this value
            will limit the number of subscriber channels to the specified number
            of long running tasks.  These tasks will process messages for ALL
            asynchronous subscribers rather than one task for each subscriber.  
            Delivery order by subscriber is still guaranteed.  The shared message
            processing channels are still each bounded by the SubChannelLength 
            option.  Note, slow subscriber errors will flag the last subscriber 
            processed in the tasks, which may not actually be the slowest subscriber.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.SubscriptionBatchSize">
            <summary>
            Gets or sets the batch size for calling subscription handlers.
            </summary>
            <remarks>
            When delivering messages to the subscriber, the batch size determines
            how many messages could be retrieved from the internal subscription
            queue at one time. This can allow higher performance from a single
            subscriber by avoiding the locking overhead of one-at-a-time
            retrieval from the queue.
            </remarks>
        </member>
        <member name="T:NATS.Client.ConnectionFactory">
            <summary>
            Provides factory methods to create connections to NATS Servers.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.ConnectionFactory"/> class,
            providing factory methods to create connections to NATS Servers.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. <c>"urlA, urlB"</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.GetDefaultOptions">
            <summary>
            Retrieves the default set of client options.
            </summary>
            <returns>The default <see cref="T:NATS.Client.Options"/> object for the NATS client.</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateSecureConnection(System.String)">
            <summary>
            Attempt to connect to the NATS server using TLS referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection">
            <summary>
            Create a connection to the NATs server using the default options.
            </summary>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions"/>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(NATS.Client.Options)">
            <summary>
            Create a connection to a NATS Server defined by the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, using the default options.
            </summary>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions"/>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(System.String)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(NATS.Client.Options)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, using the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="T:NATS.Client.ConnState">
            <summary>
            State of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DISCONNECTED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is disconnected.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CONNECTED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is connected to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CLOSED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> has been closed.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.RECONNECTING">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently reconnecting
            to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CONNECTING">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently connecting
            to a NATS Server.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection">
            <summary>
            <see cref="T:NATS.Client.Connection"/> represents a bare connection to a NATS server.
            Users should create an <see cref="T:NATS.Client.IConnection"/> instance using
            <see cref="T:NATS.Client.ConnectionFactory"/> rather than directly using this class.
            </summary>
        </member>
        <member name="T:NATS.Client.IConnection">
            <summary>
            Represents a connection to the NATS server.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>NATS implements a publish-subscribe message distribution model. NATS publish subscribe is a
            one-to-many communication. A publisher sends a message on a subject. Any active subscriber listening
            on that subject receives the message. Subscribers can register interest in wildcard subjects.</para>
            <para>In the basic NATS platfrom, if a subscriber is not listening on the subject (no subject match),
            or is not acive when the message is sent, the message is not recieved. NATS is a fire-and-forget
            messaging system. If you need higher levels of service, you can either use NATS Streaming, or build the
            additional reliability into your client(s) yourself.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a <see cref="T:NATS.Client.Msg"/> instance, which includes the subject, an optional reply, and an
            optional data field.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> instance containing the subject, optional reply, and data to publish
            to the NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages. 
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String)">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:NATS.Client.IConnection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.IConnection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.IsClosed"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="P:NATS.Client.IConnection.Stats"/>
        </member>
        <member name="P:NATS.Client.IConnection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.IConnection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IConnection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IConnection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.IConnection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.ResetStats"/>
        </member>
        <member name="P:NATS.Client.IConnection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of any payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)"/>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:NATS.Client.Connection.getMessageChannel">
            <summary>
            Gets an available message channel for use with async subscribers.  It will
            setup the message channel pool if configured to do so.
            </summary>
            <returns>
            A channel for use, null if configuration dictates not to use the 
            channel pool.
            </returns>
        </member>
        <member name="M:NATS.Client.Connection.#ctor(NATS.Client.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Connection"/> class
            with the specified <see cref="T:NATS.Client.Options"/>.
            </summary>
            <param name="options">The configuration options to use for this 
            <see cref="T:NATS.Client.Connection"/>.</param>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a <see cref="T:NATS.Client.Msg"/> instance, which includes the subject, an optional reply, and an
            optional data field.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> instance containing the subject, optional reply, and data to publish
            to the NATS server.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="msg"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <see cref="P:NATS.Client.Msg.Subject"/> property of
            <paramref name="msg"/> is <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The <see cref="P:NATS.Client.Msg.Data"/> property of <paramref name="msg"/> 
            exceeds the maximum payload size supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call 
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size supported
            by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while 
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before it
            could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeSync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages. 
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.String)">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.Connection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.Connection.IsClosed"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="P:NATS.Client.Connection.Stats"/>
        </member>
        <member name="M:NATS.Client.Connection.ToString">
            <summary>
            Returns a string representation of the
            value of this <see cref="T:NATS.Client.Connection"/> instance.
            </summary>
            <returns>A string that represents the current instance.</returns>
        </member>
        <member name="M:NATS.Client.Connection.Dispose(System.Boolean)">
            <summary>
            Closes the connection and optionally releases the managed resources.
            </summary>
            <remarks>In derived classes, do not override the <see cref="M:NATS.Client.Connection.Close"/> method, instead
            put all of the <seealso cref="T:NATS.Client.Connection"/> cleanup logic in your Dispose override.</remarks>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:NATS.Client.Connection.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <remarks>This method disposes the connection, by clearing all pending
            operations, and closing the connection to release resources.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.Connection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.Connection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="M:NATS.Client.Connection.ResetStats"/>
        </member>
        <member name="P:NATS.Client.Connection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of a payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.Connection.Publish(NATS.Client.Msg)"/>
            <seealso cref="M:NATS.Client.Connection.Publish(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:NATS.Client.Connection.TCPConnection">
            <summary>
            Convenience class representing the TCP connection to prevent 
            managing two variables throughout the NATs client code.
            </summary>
        </member>
        <member name="F:NATS.Client.Connection.TCPConnection.mu">
            A note on the use of streams.  .NET provides a BufferedStream
            that can sit on top of an IO stream, in this case the network
            stream. It increases performance by providing an additional
            buffer.
            
            So, here's what we have for writing:
                Client code
                     ->BufferedStream (bw)
                         ->NetworkStream/SslStream (srvStream)
                             ->TCPClient (srvClient);
                             
             For reading:
                Client code
                     ->NetworkStream/SslStream (srvStream)
                         ->TCPClient (srvClient);
            
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool">
            <summary>
            The SubChannelPool class is used when the application
            has specified async subscribers will share channels and associated
            processing threads in the connection.  It simply returns a channel 
            that already has a long running task (thread) processing it.  
            Async subscribers use this channel in lieu of their own channel and
            message processing task.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.SubChannelPool.getChannel">
            <summary>
            Gets a message channel for use with an async subscriber.
            </summary>
            <returns>
            A channel, already setup with a task processing messages.
            </returns>
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool.SubChannelProcessor">
            <summary>
            SubChannelProcessor creates a channel and a task to process
            messages on that channel.
            </summary>
        </member>
        <member name="T:NATS.Client.Statistics">
            <summary>
            Tracks various statistics received and sent on an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="T:NATS.Client.IStatistics">
            <summary>
            Tracks various statistics received and sent on an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="T:NATS.Client.Msg">
            <summary>
            A NATS message is an object encapsulating a subject, optional reply
            payload, and subscription information, sent or received by the client
            application.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class without any
            subject, reply, or data.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, reply, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="reply">A reply subject, or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject and no data.
            </summary>
            <param name="subject">Subject of the message.</param>
        </member>
        <member name="M:NATS.Client.Msg.AssignData(System.Byte[])">
            <summary>
            Assigns the data of the message.
            </summary>
            <remarks>
            <para>This is a direct assignment,
            to avoid expensive copy operations.  A change to the passed
            byte array will be changed in the message.</para>
            <para>The calling application is responsible for the data integrity in the message.</para>
            </remarks>
            <param name="data">a bytes buffer of data.</param>
        </member>
        <member name="M:NATS.Client.Msg.ToString">
            <summary>
            Generates a string representation of the messages.
            </summary>
            <returns>A string representation of the messages.</returns>
        </member>
        <member name="P:NATS.Client.Msg.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Reply">
            <summary>
            Gets or sets the reply subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Data">
            <summary>
            Gets or sets the payload of the message.
            </summary>
            <remarks>
            This copies application data into the message. See <see cref="M:NATS.Client.Msg.AssignData(System.Byte[])"/> to directly pass the bytes buffer.
            </remarks>
            <seealso cref="M:NATS.Client.Msg.AssignData(System.Byte[])"/>
        </member>
        <member name="P:NATS.Client.Msg.ArrivalSubcription">
            <summary>
            Gets the <see cref="T:NATS.Client.ISubscription"/> which received the message.
            </summary>
        </member>
        <member name="T:NATS.Client.NUID">
            <summary>
            NUID needs to be very fast to generate and truly unique, all while being entropy pool friendly.
            We will use 12 bytes of crypto generated data (entropy draining), and 10 bytes of sequential data
            that is started at a pseudo random number and increments with a pseudo-random increment.
            Total is 22 bytes of base 36 ascii text.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.LENGTH">
            <summary>
            Length of the NUID.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXPRE">
            <summary>
            Maximum value of the prefix.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXSEQ">
            <summary>
            Maximum value of the sequence.
            </summary>
        </member>
        <member name="M:NATS.Client.NUID.RandomizePrefix">
            <summary>
            Generates a new crypto/rand seeded prefix.
            </summary>
            <remarks>
            Generally not needed, this happens automatically.
            </remarks>
        </member>
        <member name="M:NATS.Client.NUID.#ctor">
            <summary>
            Creates a new NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Instance">
            <summary>
            Gets the global instance of a NUID object
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.NextGlobal">
            <summary>
            Returns the next NUID from the global instance.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Next">
            <summary>
            Returns the next nuid string value from the NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Pre">
            <summary>
            Gets or sets the prefix.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Seq">
            <summary>
            Gets or sets the sequence.  Not normally used outside of testing.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Length">
            <summary>
            Gets the Length of the nuid.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="T:NATS.Client.SyncSubscription">
            <summary>
            <see cref="T:NATS.Client.SyncSubscription"/> provides messages for a subject through calls
            to <see cref="M:NATS.Client.SyncSubscription.NextMessage"/> and <see cref="M:NATS.Client.SyncSubscription.NextMessage(System.Int32)"/>. This class should
            not be used directly.
            </summary>
        </member>
        <member name="M:NATS.Client.SyncSubscription.NextMessage">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, blocking until one is available.
            </summary>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The connection to the NATS Server
            is closed.</exception>
            <exception cref="T:NATS.Client.NATSMaxMessagesException">The maximum number of messages have been
            delivered to this <see cref="T:NATS.Client.ISyncSubscription"/>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The subscription is closed.</exception>
            <exception cref="T:NATS.Client.NATSSlowConsumerException">The subscription has been marked as a slow consumer.</exception>
        </member>
        <member name="M:NATS.Client.SyncSubscription.NextMessage(System.Int32)">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, or block up to a given timeout until the next one is available.
            </summary>
            <param name="timeout">The amount of time, in milliseconds, to wait for
            the next message.</param>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The connection to the NATS Server
            is closed.</exception>
            <exception cref="T:NATS.Client.NATSMaxMessagesException">The maximum number of messages have been
            delivered to this <see cref="T:NATS.Client.ISyncSubscription"/>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The subscription is closed.</exception>
            <exception cref="T:NATS.Client.NATSSlowConsumerException">The subscription has been marked as a slow consumer.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while waiting for the next available
            <see cref="T:NATS.Client.Msg"/>.</exception>
        </member>
        <member name="T:NATS.Client.Serializer">
            <summary>
            Represents the method that will handle serialization of <paramref name="obj"/>
            to a byte array.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:NATS.Client.Deserializer">
            <summary>
            Represents a method that will handle deserialization of a byte array
            into an <see cref="T:System.Object"/>.
            </summary>
            <param name="data">The byte array in a <see cref="T:NATS.Client.Msg"/> payload
            that contains the <see cref="T:System.Object"/> to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="T:NATS.Client.EncodedMessageEventArgs">
            <summary>
            Provides decoded messages received by subscriptions or requests.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Subject">
            <summary>
            Gets the subject for the received <see cref="T:NATS.Client.Msg"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Reply">
            <summary>
            Gets the reply topic for the received <see cref="T:NATS.Client.Msg"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject">
            <summary>
            Gets the object decoded (deserialized) from the incoming message.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Message">
            <summary>
            Gets the original <see cref="T:NATS.Client.Msg"/> that <see cref="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject"/> was deserialized from.
            </summary>
        </member>
        <member name="T:NATS.Client.EncodedConnection">
            <summary>
            Represents an <see cref="T:NATS.Client.Connection"/> which uses a client specified
            encoding scheme.
            </summary>
        </member>
        <member name="T:NATS.Client.IEncodedConnection">
            <summary>
            Represents a connection to a NATS Server which uses a client specified
            encoding scheme.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.IConnection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.IsClosed"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="P:NATS.Client.IEncodedConnection.Stats"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.IEncodedConnection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.ResetStats"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of any payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnSerialize">
            <summary>
            Gets or sets the method which is called to serialize
            objects sent as a message payload.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnDeserialize">
            <summary>
            Gets or sets the method which is called to deserialize
            objects from a message payload.
            </summary>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialzed form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialzed form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSException"><see cref="P:NATS.Client.EncodedConnection.OnDeserialize"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSException"><see cref="P:NATS.Client.EncodedConnection.OnDeserialize"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialzed form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialzed form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Dispose(System.Boolean)">
            <summary>
            Closes the <see cref="T:NATS.Client.EncodedConnection"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="P:NATS.Client.EncodedConnection.OnSerialize">
            <summary>
            Gets or sets the method which is called to serialize
            objects sent as a message payload.
            </summary>
            <remarks>If <c>null</c> is given then the
            default serialization method for the platform is used, if one exists.</remarks>
        </member>
        <member name="P:NATS.Client.EncodedConnection.OnDeserialize">
            <summary>
            Gets or sets the method which is called to deserialize
            objects from a message payload.
            </summary>
            <remarks>If <c>null</c> is given then the
            default deserialization method for the platform is used, if one exists.</remarks>
        </member>
        <member name="T:NATS.Client.NATSException">
            <summary>
            The exception that is thrown when there is a NATS error condition.  All
            NATS exception inherit from this class.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionException">
            <summary>
            The exception that is thrown when there is a connection error.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSProtocolException">
            <summary>
            This exception that is thrown when there is an internal error with
            the NATS protocol.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNoServersException">
            <summary>
            The exception that is thrown when a connection cannot be made
            to any server.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnWantedException">
            <summary>
            The exception that is thrown when a secure connection is requested,
            but not required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnRequiredException">
            <summary>
            The exception that is thrown when a secure connection is required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionClosedException">
            <summary>
            The exception that is thrown when a an operation is performed on
            a connection that is closed.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSlowConsumerException">
            <summary>
            The exception that is thrown when a consumer (subscription) is slow.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSStaleConnectionException">
            <summary>
            The exception that is thrown when an operation occurs on a connection
            that has been determined to be stale.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxPayloadException">
            <summary>
            The exception that is thrown when a message payload exceeds what
            the maximum configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxMessagesException">
            <summary>
            The exception that is thrown when a subscriber has exceeded the maximum
            number of messages that has been configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSBadSubscriptionException">
            <summary>
            The exception that is thrown when a subscriber operation is performed on
            an invalid subscriber.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSTimeoutException">
            <summary>
            The exception that is thrown when a NATS operation times out.
            </summary>
        </member>
    </members>
</doc>
